// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// id Int @id @default(autoincrement())
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt

// A User has many Reptiles and Schedules.
// A Reptile has many Feedings, HusbandryRecords, and Schedules 

model User {
  id            Int        @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String     @unique
  password_hash String
  profile       Profile    @relation(fields: [profileId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  profileId     Int        @unique
  Schedule      Schedule[]
  Reptile       Reptile[]
}

model Profile {
  id              Int      @id @default(autoincrement())
  age             Int?
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?
}

model Reptile {
  id              Int               @id @default(autoincrement())
  userId          Int
  species         String // one of "ball_python", "king_snake", "corn_snake", "redtail_boa"
  name            String
  sex             String // either "m" or "f"
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Schedule        Schedule[]        
  HusbandryRecord HusbandryRecord[] 
  Feeding         Feeding[]         
  user            User              @relation(fields: [userId], references: [id])
}

model Feeding {
  id        Int      @id @default(autoincrement())
  reptileId Int
  reptile   Reptile  @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  foodItem  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HusbandryRecord {
  id          Int      @id @default(autoincrement())
  reptileId   Int
  reptile     Reptile  @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  length      Float
  weight      Float
  temperature Float
  humidity    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Schedule {
  id          Int      @id @default(autoincrement())
  reptileId   Int
  reptile     Reptile  @relation(fields: [reptileId], references: [id], onDelete: Cascade)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  type        String // one of "feed", "record", "clean"
  description String
  monday      Boolean  @default(false)
  tuesday     Boolean  @default(false)
  wednesday   Boolean  @default(false)
  thursday    Boolean  @default(false)
  friday      Boolean  @default(false)
  saturday    Boolean  @default(false)
  sunday      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
